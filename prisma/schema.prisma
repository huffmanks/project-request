// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

model User {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String
  email      String   @unique
  phone      String
  title      String
  department String
  role       UserRole @default(USER)

  projectsApprover Project[] @relation("ProjectApprover")
  projectsContact  Project[] @relation("ProjectContact")
  projectsInvoice  Project[] @relation("ProjectInvoice")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id             String    @id @default(uuid())
  title          String
  purpose        String
  proofDate      DateTime
  completionDate DateTime
  isMailed       Boolean   @default(false)
  mailDate       DateTime?
  budget         Float
  printerQuote   Boolean
  meeting        Boolean
  additionalInfo String?

  approverId String?
  approver   User?      @relation("ProjectApprover", fields: [approverId], references: [id], onDelete: SetNull)
  contactId  String?
  contact    User?      @relation("ProjectContact", fields: [contactId], references: [id], onDelete: SetNull)
  invoiceId  String?
  invoice    User?      @relation("ProjectInvoice", fields: [invoiceId], references: [id], onDelete: SetNull)
  tasks      Task[]
  audiences  Audience[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Audience {
  id    String @id @default(uuid())
  title String

  projects Project[]
}

model Task {
  id String @id @default(uuid())

  projectId  String
  project    Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskTypeId String
  taskType   TaskType        @relation(fields: [taskTypeId], references: [id], onDelete: Cascade)
  attributes TaskAttribute[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model TaskType {
  id    String @id @default(uuid())
  title String

  tasks Task[]
}

model TaskAttribute {
  id    String @id @default(uuid())
  key   String
  value String

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
